import java.util.Arrays;

public class Solution {
    public int[] prevSmaller(int[] A) {
        
        
        Stack<Integer> st = new Stack<>();

        int [] arr = new int[A.length];



        for(int i=0;i<A.length;i++){

            while(!st.isEmpty() && st.peek()>=A[i]){

                st.pop();

            }

            if(!st.isEmpty()){

                arr[i] = st.peek();

            }else{

                arr[i]= -1;

            }

            st.push(A[i]);

        }

        

        return arr;

        // int[] ans = new int[A.length];
        // int n = A.length;

        // // Fill the result array with -1 as default
        // Arrays.fill(ans, -1);

        // // Iterate through each element in the array
        // for (int i = 0; i < n; i++) {
        //     int curr = A[i];

        //     // Look for a smaller element in the previous part of the array
        //     for (int j = i - 1; j >= 0; j--) {
        //         if (A[j] < curr) {
        //             ans[i] = A[j];
        //             break; // Exit the loop once the previous smaller element is found
        //         }
        //     }
        // }

        // return ans;
    }
}
