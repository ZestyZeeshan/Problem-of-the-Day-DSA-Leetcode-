import java.util.Stack;

class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int[] pse = findpse(heights);
        int[] nse = findnse(heights);
        int area = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            area = Math.max(area, heights[i] * (nse[i] - pse[i] - 1));
        }
        return area;
    }

    public static int[] findnse(int[] heights) {
        Stack<Integer> st = new Stack<>();
        int n = heights.length;
        int[] res = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }
            if (st.isEmpty()) {
                res[i] = n;
            } else {
                res[i] = st.peek();
            }
            st.push(i);
        }
        return res;
    }

    public static int[] findpse(int[] heights) {
        Stack<Integer> st = new Stack<>();
        int n = heights.length;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }
            if (st.isEmpty()) {
                res[i] = -1;
            } else {
                res[i] = st.peek();
            }
            st.push(i);
        }
        return res;
    }
}
