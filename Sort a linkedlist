/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }

        ListNode middle= middleNode(head);
        ListNode start2= middle.next;
        middle.next=null;
        ListNode first = sortList(head);
        ListNode second = sortList(start2);

return mergeTwoLists(first,second);
    }


    public ListNode middleNode(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null &&fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }

public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode list3 = new ListNode();
        ListNode temp3 = list3;

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                temp3.next = list1;
                list1 = list1.next;
            } else {
                temp3.next = list2;
                list2 = list2.next;
            }
            temp3 = temp3.next;
        }

        if (list1 != null) {
            temp3.next = list1;
        } else {
            temp3.next = list2;
        }

        return list3.next;
    }
    
}
